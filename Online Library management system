from django.db import models
from django.contrib.auth.models import User
from datetime import datetime,timedelta
 
class Book(models.Model):
    name = models.CharField(max_length=200)
    author = models.CharField(max_length=200)
    isbn = models.PositiveIntegerField()
    category = models.CharField(max_length=50)
 
    def __str__(self):
        return str(self.name) + " ["+str(self.isbn)+']'
 
class Student(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    classroom = models.CharField(max_length=10)
    branch = models.CharField(max_length=10)
    roll_no = models.CharField(max_length=3, blank=True)
    phone = models.CharField(max_length=10, blank=True)
    image = models.ImageField(upload_to="", blank=True)
 
    def __str__(self):
        return str(self.user) + " ["+str(self.branch)+']' + " ["+str(self.classroom)+']' + " ["+str(self.roll_no)+']'
 
def expiry():
    return datetime.today() + timedelta(days=14)
class IssuedBook(models.Model):
    student_id = models.CharField(max_length=100, blank=True) 
    isbn = models.CharField(max_length=13)
    issued_date = models.DateField(auto_now=True)
    expiry_date = models.DateField(default=expiry)


from django.urls import path
from . import views
 
urlpatterns = [
    path("", views.index, name="index"),
    path("add_book/", views.add_book, name="add_book"),
    path("view_books/", views.view_books, name="view_books"),
    path("view_students/", views.view_students, name="view_students"),
    path("issue_book/", views.issue_book, name="issue_book"),
    path("view_issued_book/", views.view_issued_book, name="view_issued_book"),
    path("student_issued_books/", views.student_issued_books, name="student_issued_books"),
    path("profile/", views.profile, name="profile"),
    path("edit_profile/", views.edit_profile, name="edit_profile"),
 
    path("student_registration/", views.student_registration, name="student_registration"),
    path("change_password/", views.change_password, name="change_password"),
    path("student_login/", views.student_login, name="student_login"),
    path("admin_login/", views.admin_login, name="admin_login"),
    path("logout/", views.Logout, name="logout"),
 
    path("delete_book/<int:myid>/", views.delete_book, name="delete_book"),
    path("delete_student/<int:myid>/", views.delete_student, name="delete_student"),
]

<div class="p-4 bg-light">
    <div class="container-fluid py-5">
      <h1 class="display-5 fw-bold">Custom jumbotron</h1>
      <p class="col-md-8 fs-4">Using a series of utilities, you can create this jumbotron, just like the one in previous versions of Bootstrap. Check out the examples below for how you can remix and restyle it to your liking.</p>
      <button class="btn btn-primary btn-lg" type="button">Example button</button>
    </div>
    <div class="container">
  <div class="row">
 
    <div class="col-lg-6">
      <img src="{% static 'Admin-icon.png' %}" width="50%" height="50%" alt=""><br><br>
        <a class="btn btn-outline-primary btn-lg" style="text-align:center" href="/admin_login/">Admin</a>
    </div>
 
    <div class="col-lg-6">
      <img src="{% static 'student.png' %}" width="50%" height="50%" alt=""><br><br>
      <a class="btn btn-outline-primary btn-lg" href="/student_login/">Student</a>
    </div>
  </div>
  </div>
</div>

<div class="container">
    <form method="POST"> {% csrf_token %}
    <div class="row mt-4">
        <div class="form-group col-md-12">
            <label><i style="font-weight: bold;">Book Name</i></label>
            <input type="text" class="form-control mt-2" name="name" placeholder="Enter name of the Book" required>
        </div>
    </div>
 
    <div class="row mt-4">
        <div class="form-group col-md-12">
            <label><i style="font-weight: bold;">Author Name</i></label>
            <input type="text" class="form-control mt-2" name="author" placeholder="Enter name of the Author" required>
        </div>
    </div>
 
    <div class="row mt-4">
        <div class="form-group col-md-12">
            <label><i style="font-weight: bold;">ISBN Number</i></label>
            <input type="number" class="form-control mt-2" name="isbn" placeholder="Enter ISBN number of the book" required>
        </div>
    </div>
 
    <div class="row mt-4">
        <div class="form-group col-md-12">
            <label><i style="font-weight: bold;">Category</i></label>
            <input type="text" class="form-control mt-2" name="category" placeholder="Enter Category of the book" required>
        </div>
    </div>
    <button type="submit" class="btn btn-outline-primary mt-4">Add Book</button>
</div>
</form>

def add_book(request):
    if request.method == "POST":
        name = request.POST['name']
        author = request.POST['author']
        isbn = request.POST['isbn']
        category = request.POST['category']
 
        books = Book.objects.create(name=name, author=author, isbn=isbn, category=category)
        books.save()
        alert = True
        return render(request, "add_book.html", {'alert':alert})
    return render(request, "add_book.html")

